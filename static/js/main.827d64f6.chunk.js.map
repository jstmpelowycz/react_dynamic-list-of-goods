{"version":3,"sources":["enums/LoadType.ts","api/goods.ts","components/GoodsList/GoodsList.tsx","App.tsx","index.tsx"],"names":["LoadType","getAllGoods","fetch","then","response","ok","Error","status","statusText","json","getFirstFive","goods","sort","itemA","itemB","name","localeCompare","slice","getRedGoods","filter","color","GoodsList","memo","map","style","App","useState","setGoods","Default","currentLoadType","setCurrentLoadType","getGoods","useCallback","loadType","a","All","FiveFirst","Red","loadCallback","goodsFromServer","className","type","disabled","onClick","ReactDOM","render","document","getElementById"],"mappings":"iLAAYA,E,6DCcCC,EAAc,kBAVlBC,MAHO,yEAIXC,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,WAMTC,EAAe,WAC1B,OAAOT,IACJE,MAAK,SAAAQ,GAAK,OACTA,EACGC,MAAK,SAACC,EAAOC,GAAR,OACJD,EAAME,KAAKC,cAAeF,EAAMC,SAEjCE,MAAM,EAAG,OAILC,EAAc,WACzB,OAAOjB,IACJE,MAAK,SAAAQ,GAAK,OACTA,EAAMQ,QAAO,kBAAyB,QAAzB,EAAGC,a,OCxBTC,EAAuBC,gBAAK,YAAgB,IAAbX,EAAY,EAAZA,MAC1C,OACE,6BACGA,EAAMY,KAAI,gBAAGR,EAAH,EAAGA,KAAMK,EAAT,EAASA,MAAT,OACT,oBAEEI,MAAO,CAAEJ,SAFX,SAIGL,GAHIA,Y,SFXHf,O,qBAAAA,I,aAAAA,I,yBAAAA,I,cAAAA,M,KGUL,IAAMyB,EAAUH,gBAAK,WAC1B,MAA0BI,mBAAsB,IAAhD,mBAAOf,EAAP,KAAcgB,EAAd,KACA,EAA8CD,mBAAS1B,EAAS4B,SAAhE,mBAAOC,EAAP,KAAwBC,EAAxB,KAEMC,EAAWC,sBAAW,uCAAC,WAAOC,GAAP,iBAAAC,EAAA,2DAGnBD,EAHmB,cAIpBjC,EAASmC,IAJW,SAOpBnC,EAASoC,UAPW,SAUpBpC,EAASqC,IAVW,wBAKvBC,EAAerC,EALQ,mCAQvBqC,EAAe5B,EARQ,mCAWvB4B,EAAepB,EAXQ,kCAcjB,IAAIZ,MAAM,6BAdO,yBAiBGgC,IAjBH,QAiBrBC,EAjBqB,OAmB3BZ,EAASY,GACTT,EAAmBG,GApBQ,4CAAD,sDAqBzB,IAEH,OACE,sBAAKO,UAAU,MAAf,UACE,oDAEA,sBAAKA,UAAU,iBAAf,UACE,wBACEA,UAAU,cACVC,KAAK,SACLC,SAAUb,IAAoB7B,EAASmC,IACvCQ,QAAS,kBAAMZ,EAAS/B,EAASmC,MAJnC,iBASA,wBACEK,UAAU,cACVC,KAAK,SACLC,SAAUb,IAAoB7B,EAASoC,UACvCO,QAAS,kBAAMZ,EAAS/B,EAASoC,YAJnC,wBASA,wBACEI,UAAU,cACVC,KAAK,SACLC,SAAUb,IAAoB7B,EAASqC,IACvCM,QAAS,kBAAMZ,EAAS/B,EAASqC,MAJnC,oBAUF,cAAChB,EAAD,CAAWV,MAAOA,UCnExBiC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.827d64f6.chunk.js","sourcesContent":["export enum LoadType {\n  Default,\n  All,\n  FiveFirst,\n  Red,\n}\n","// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json';\n\nconst request = (url: string) => {\n  return fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getAllGoods = (): Promise<GoodsItem[]> => request(API_URL);\n\nexport const getFirstFive = (): Promise<GoodsItem[]> => {\n  return getAllGoods()\n    .then(goods => (\n      goods\n        .sort((itemA, itemB) => (\n          itemA.name.localeCompare((itemB.name))\n        ))\n        .slice(0, 5)\n    ));\n};\n\nexport const getRedGoods = (): Promise<GoodsItem[]> => {\n  return getAllGoods()\n    .then(goods => (\n      goods.filter(({ color }) => color === 'red')\n    ));\n};\n","import { FC, memo } from 'react';\n\ninterface Props {\n  goods: GoodsItem[];\n}\n\nexport const GoodsList: FC<Props> = memo(({ goods }) => {\n  return (\n    <ul>\n      {goods.map(({ name, color }) => (\n        <li\n          key={name}\n          style={{ color }}\n        >\n          {name}\n        </li>\n      ))}\n    </ul>\n  );\n});\n","import './App.scss';\nimport {\n  FC, memo, useCallback, useState,\n} from 'react';\nimport {\n  getAllGoods, getFirstFive, getRedGoods,\n} from './api/goods';\nimport { GoodsList } from './components/GoodsList';\nimport { LoadType } from './enums/LoadType';\n\nexport const App: FC = memo(() => {\n  const [goods, setGoods] = useState<GoodsItem[]>([]);\n  const [currentLoadType, setCurrentLoadType] = useState(LoadType.Default);\n\n  const getGoods = useCallback(async (loadType: LoadType) => {\n    let loadCallback: GoodsPromise;\n\n    switch (loadType) {\n      case LoadType.All:\n        loadCallback = getAllGoods;\n        break;\n      case LoadType.FiveFirst:\n        loadCallback = getFirstFive;\n        break;\n      case LoadType.Red:\n        loadCallback = getRedGoods;\n        break;\n      default:\n        throw new Error('Error: invalid load type!');\n    }\n\n    const goodsFromServer = await loadCallback();\n\n    setGoods(goodsFromServer);\n    setCurrentLoadType(loadType);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic Goods List</h1>\n\n      <div className=\"App__container\">\n        <button\n          className=\"App__button\"\n          type=\"button\"\n          disabled={currentLoadType === LoadType.All}\n          onClick={() => getGoods(LoadType.All)}\n        >\n          All\n        </button>\n\n        <button\n          className=\"App__button\"\n          type=\"button\"\n          disabled={currentLoadType === LoadType.FiveFirst}\n          onClick={() => getGoods(LoadType.FiveFirst)}\n        >\n          Five first\n        </button>\n\n        <button\n          className=\"App__button\"\n          type=\"button\"\n          disabled={currentLoadType === LoadType.Red}\n          onClick={() => getGoods(LoadType.Red)}\n        >\n          Red\n        </button>\n      </div>\n\n      <GoodsList goods={goods} />\n    </div>\n  );\n});\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}